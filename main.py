# main.py
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto, \
    TelegramError
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackQueryHandler, ConversationHandler, \
    CallbackContext
from datetime import datetime
from bot_admin import get_handlers

import telegram
import re
import django
import os
import logging
from django.conf import settings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'FlowerShop.settings')
django.setup()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Django

from tg_bot.models import Category, Product, PriceRange, UserBot, Order

from bot_admin import (
#    add_comment,
    assign_delivery,
    change_order_status,
    delivery_orders,
    go_back_to_delivery_orders,
    go_back_to_manager_orders,
#    handle_comment_input,
    handle_delivery_order,
    handle_order_selection,
    manager_orders,
    set_delivery_person,
    set_delivery_status,
    set_order_status,
)


logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –û–ø—Ä–µ–¥–µ–ª–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
EVENT, BUDGET, PRODUCT_SELECTION, INPUT_DATA, CONFIRMATION = range(5)

users = {}
load_dotenv()
TOKEN = os.getenv('TG_BOT_TOKEN')


# –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é —Å –≤—ã–±–æ—Ä–æ–º —Å–æ–±—ã—Ç–∏—è
def start(update: Update, context: CallbackContext) -> int:
    user_data = context.user_data
    user_data.clear()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å user {update.effective_user.id}")
    event_chose(update, context)
    return EVENT


def send_photo_message(update: Update, context: CallbackContext, photo_path: str = None, caption: str = None,
                       reply_markup: InlineKeyboardMarkup = None) -> None:
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è callback_query
    if update.callback_query:
        query = update.callback_query
        query.answer()

        # –ó–∞–≥—Ä—É–∑–∫–∞ –ø—É—Ç–∏ –∫ —Ñ–æ—Ç–æ –∏–∑ user_data, –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
        if photo_path is None:
            logger.info(f"–ø—É—Ç—å —Ñ–æ—Ç–æ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –ø–∞—Ç—á –ø—É—Å—Ç–æ–π {context.user_data['photo_path']}")
            photo_path = context.user_data['photo_path']

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ –ø–æ–¥–ø–∏—Å—å –∏–ª–∏ —Ä–∞–∑–º–µ—Ç–∫–∞
        if query.message.caption != caption or query.message.reply_markup != reply_markup:
            # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ
            if 'last_photo_message_id' in context.user_data:
                try:
                    context.bot.edit_message_media(
                        chat_id=query.message.chat_id,
                        message_id=context.user_data['last_photo_message_id'],
                        media=InputMediaPhoto(open(photo_path, 'rb'), caption=caption, parse_mode="Markdown"),
                        reply_markup=reply_markup
                    )
                except TelegramError as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            else:
                # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–¥—É–∫—Ç–æ–º, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
                with open(photo_path, 'rb') as photo:
                    message = query.message.reply_photo(photo=photo, caption=caption, reply_markup=reply_markup,
                                                        parse_mode="Markdown")
                    context.user_data['last_photo_message_id'] = message.message_id
        else:
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
            context.user_data['last_photo_message_id'] = query.message.message_id
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if 'last_photo_message_id' in context.user_data:
            try:
                # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ
                context.bot.edit_message_media(
                    chat_id=update.message.chat_id,
                    message_id=context.user_data['last_photo_message_id'],
                    media=InputMediaPhoto(open(photo_path, 'rb'), caption=caption, parse_mode="Markdown"),
                    reply_markup=reply_markup
                )
            except TelegramError as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–¥—É–∫—Ç–æ–º, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
            with open(photo_path, 'rb') as photo:
                message = update.message.reply_photo(photo=photo, caption=caption, reply_markup=reply_markup,
                                                     parse_mode="Markdown")
                context.user_data['last_photo_message_id'] = message.message_id

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    logger.info(f"—Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ : {context.user_data['last_photo_message_id']}")


def event_chose(update: Update, context: CallbackContext) -> None:
    logger.info('–∑–∞—à–µ–ª –≤ –º–µ–Ω—é –µ–≤–µ–Ω—Ç')
    photo_path = os.path.join('static', 'products', 'to', 'event.jpg')

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π –∏–∑ –ë–î
    events = Category.objects.all()
    keyboard = []
    caption = '**  üéâ –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ –∏–ª–∏ –ø–æ–≤–æ–¥ –ø–æ–¥–∞—Ä–∏—Ç—å —Ü–≤–µ—Ç—ã üåπüåπüåπ**'
    for event in events:
        keyboard.append([InlineKeyboardButton(event.name, callback_data=f'event_{event.id}_{event.name}')])
    reply_markup = InlineKeyboardMarkup(keyboard)

    send_photo_message(update, context, photo_path, caption, reply_markup)
    context.user_data['event'] = None
    return EVENT


def budget_chose(update: Update, context: CallbackContext) -> int:
    photo_path = os.path.join('static', 'products', 'to', 'budget.jpg')

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±—é–¥–∂–µ—Ç–æ–≤ –∏–∑ –ë–î
    budgets = PriceRange.objects.all()
    keyboard = []
    caption = '** –í—ã–±–µ—Ä–∏—Ç–µ –±—é–¥–∂–µ—Ç –ø—Ä–µ–∑–µ–Ω—Ç–∞ üí∞**'
    # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π –∫–Ω–æ–ø–∫–∏ –±—é–¥–∂–µ—Ç–∞
    for budget in budgets:
        keyboard.append([InlineKeyboardButton(str(budget), callback_data=f"budget_{budget}")])

    # –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_event")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    send_photo_message(update, context, photo_path, caption, reply_markup)
    return BUDGET


def generate_list_products(update: Update, context: CallbackContext):
    query = update.callback_query
    logger.info(f"–≤—Ö–æ–¥ –≤ –≤—ã–±–æ—Ä–∫—É –∏–∑ –±–¥ {context.user_data['event']=} –∏ {context.user_data['budget']=}")

    # price_range_str = context.user_data['budget']('—Ä—É–±', '').strip()
    price_range_str = context.user_data['budget'].replace('—Ä—É–±', '').strip()

    # –í–∞—Ä–∏–∞–Ω—Ç: "–¥–æ 1000 —Ä—É–±"
    if "–¥–æ" in price_range_str:
        max_price = float(price_range_str.replace('–¥–æ', '').strip())  # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
        min_price = 0  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ —Ä–∞–≤–Ω–∞ 0

    # –í–∞—Ä–∏–∞–Ω—Ç: "–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è"
    elif "–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è" in price_range_str:
        min_price = 0  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ —Ä–∞–≤–Ω–∞ 0
        max_price = float('inf')  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∫–∞–∫ "–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å"


    # –í–∞—Ä–∏–∞–Ω—Ç: "1001-3000 —Ä—É–±" (–¥–∏–∞–ø–∞–∑–æ–Ω)
    elif "-" in price_range_str:
        price_range_list = price_range_str.split('-')

        if len(price_range_list) != 2:
            logger.info(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ü–µ–Ω. {len(price_range_list)=}")
            return BUDGET

        try:
            min_price = float(price_range_list[0].strip())
            max_price = float(price_range_list[1].strip())
        except ValueError:
            logger.info(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ü–µ–Ω. 2")
            return BUDGET

    else:
        logger.info("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ü–µ–Ω. 3")
        return BUDGET

    logger.info(f"–ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ {min_price=}, {max_price=}, context.user_data['event']")

    # –í—ã–±–æ—Ä–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –∏ –±—é–¥–∂–µ—Ç–∞
    filter_conditions = {
        'price__gte': min_price,
        'categories__name': context.user_data['event']
    }
    # –£—Å–ª–æ–≤–∏–µ –¥–ª—è max_price
    if max_price != float('inf'):
        filter_conditions['price__lte'] = max_price

    products = Product.objects.filter(**filter_conditions)
    if products.exists():
        context.user_data['products'] = products
        print(product for product in products)
        context.user_data['current_product'] = 0  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º current_product
        show_product(update, context)
    else:
        logger.info("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤. —Å—Ä–∞–±–æ—Ç–∞–ª–∞ (if not products) 234 —Å—Ç—Ä–æ–∫–∞")
        if 'budget' in context.user_data:
            del context.user_data['budget']
        caption = '–ù–∏—á–µ–≥–æ –Ω–µ –º–æ–∂–µ–º –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –ø–æ–≤–æ–¥ –∏–ª–∏ –±—é–¥–∂–µ—Ç'
        reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_budget")]])
        photo_path = os.path.join('static', 'products', 'to', 'error.jpg')
        send_photo_message(update, context, photo_path=photo_path, caption=caption, reply_markup=reply_markup)
        return EVENT


def show_product(update: Update, context: CallbackContext):
    user_data = context.user_data

    products = context.user_data.get('products', [])
    current_index = user_data.get('current_product', 0)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–µ –ø—É—Å—Ç –∏ –∏–Ω–¥–µ–∫—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–ª–∏–Ω—ã —Å–ø–∏—Å–∫
    if current_index >= len(products):
        logger.info("–û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Ç–æ–≤–∞—Ä–∞ - if current_index >= len(products)")
        return ConversationHandler.END

    product = products[current_index]
    context.user_data['selected_product'] = product

    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    photo_path = os.path.join(settings.MEDIA_ROOT, product.image.name)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if not os.path.exists(photo_path):
        logger.error(f"Image not found: {photo_path}")
        photo_path = os.path.join('static', 'products', 'to', 'error.jpg')
        # return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞
    keyboard = [
        [InlineKeyboardButton("‚úî –ó–∞–∫–∞–∑–∞—Ç—å", callback_data=f'product_{product.id}')],
        [InlineKeyboardButton("‚óÄ –ü—Ä–µ–¥—ã–¥—É—â–∏–π", callback_data='prev_product'),
         InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–π ‚ñ∂", callback_data='next_product')],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_budget')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    caption = f"***{product.name}***\n\n{product.description}\n\n–¶–µ–Ω–∞: ***{product.price} —Ä—É–±.***"
    send_photo_message(update, context, photo_path, caption, reply_markup)


def next_product(update: Update, context: CallbackContext):
    products = context.user_data['products']
    context.user_data['current_product'] = (context.user_data['current_product'] + 1) % len(products)
    show_product(update, context)


def prev_product(update: Update, context: CallbackContext):
    products = context.user_data['products']
    context.user_data['current_product'] = (context.user_data['current_product'] - 1) % len(products)
    show_product(update, context)


def submit_order(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    query.answer()
    print("------------------------–í–í–û–®–õ–ò –í Submit ORDer------------------")
    logger.info(
        f"full_name: {context.user_data['name']}, phone {context.user_data['phone']}, "
        f"address: {context.user_data['address']}")

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
    user, created = UserBot.objects.get_or_create(user_id=update.effective_user.id,
                                                  defaults={'full_name': context.user_data['name'],
                                                            'phone': context.user_data['phone'],
                                                            'address': context.user_data['address']})
    date_format_input = '%d.%m.%Y %H:%M'
    date_format_output = '%Y-%m-%d %H:%M'
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
    delivery_date_time_input = context.user_data['delivery_date_time']
    delivery_date_time = datetime.strptime(delivery_date_time_input, date_format_input)
    delivery_date_time_formatted = delivery_date_time.strftime(date_format_output)

    # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    order, created = Order.objects.get_or_create(
        product=context.user_data['selected_product'],
        user=user,
        comment=context.user_data.get('comments', ''),
        delivery_address=context.user_data['address'],
        desired_delivery_date=delivery_date_time_formatted,
        status='created')

    # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
    logger.info("–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")

    return ConversationHandler.END  # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞


# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
def cancel(update: Update, context: CallbackContext) -> int:
    logger.info('–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω. –ù–∞–ø–∏—à–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.')
    return ConversationHandler.END


def error_handler(update: object, context: CallbackContext) -> None:
    logger.error("Exception while handling an update:", exc_info=context.error)


def handle_callback(update: Update, context: CallbackContext) -> int:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö callback_data.
    """
    query = update.callback_query
    query.answer()
    callback_data = query.data

    # –†–∞–∑–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö callback
    if callback_data.startswith("event_"):
        query = update.callback_query
        query.answer()
        event = query.data.split('_')[2]
        context.user_data['event'] = event

        logger.info(
            f"if callback_data.startswith(event_) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} "
            f"–≤—ã–±—Ä–∞–ª event: {context.user_data['event']}")
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –±—é–¥–∂–µ—Ç–∞
        budget_chose(update, context)
        return BUDGET

    elif callback_data.startswith("budget_"):
        budget = callback_data.split('_')[1]
        context.user_data['budget'] = budget
        generate_list_products(update, context)
        logger.info(f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –≤—ã–±—Ä–∞–ª budget_: {budget}")
        return PRODUCT_SELECTION

    elif callback_data.startswith("product_"):
        product_id = callback_data.split('_')[1]
        logger.info(f" –≤—ã–±—Ä–∞–ª–∏ —Ç–æ–≤–∞—Ä —Å ID: {product_id}")
        # –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞
        return PRODUCT_SELECTION

    elif callback_data == "back_to_event":
        logger.info("–ö–Ω–æ–ø–∫–∞ '–ù–∞–∑–∞–¥' –Ω–∞–∂–∞—Ç–∞. –ü–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é —Å–æ–±—ã—Ç–∏–π.")
        event_chose(update, context)
        return EVENT


def handle_button_click(update: Update, context: CallbackContext):
    """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞"""
    query = update.callback_query
    query.answer()

    if query.data == 'next_product':
        next_product(update, context)

    elif query.data == 'prev_product':
        prev_product(update, context)

    elif query.data == 'back_to_budget':
        budget_chose(update, context)
        logger.info('back_to_budget')
        return EVENT

    elif query.data.startswith('product_'):
        product_id = int(query.data.split('_')[1])
        context.user_data['product_to_order'] = Product.objects.get(id=product_id)

        logger.info(f"–≤—ã–±—Ä–∞–Ω —Ç–æ–≤–∞—Ä {context.user_data['product_to_order']}")
        show_order_form(update, context)
        return INPUT_DATA


def show_order_form(update: Update, context: CallbackContext, error_message=None):
    user_data = context.user_data
    product = context.user_data['selected_product']
    caption = (
            (f"**{error_message}**\n" if error_message else "") +
            f"***{product.name}***\n–¶–µ–Ω–∞: ***{product.price} —Ä—É–±.***\n\n"
            f"–ò–º—è: {user_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {user_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"–ê–¥—Ä–µ—Å: {user_data.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {user_data.get('delivery_date_time', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É: {user_data.get('comment', '')}"
    )

    buttons = [
        [InlineKeyboardButton("–í–≤–µ–¥–∏—Ç–µ –§–ò–û", callback_data="input_name")],
        [InlineKeyboardButton("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω", callback_data="input_phone")],
        [InlineKeyboardButton("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å", callback_data="input_address")],
        [InlineKeyboardButton("–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏", callback_data="delivery_time")],
        [InlineKeyboardButton("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É", callback_data="input_comment")],
        [InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="cancel_order")],
        [InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="submit_order")]
    ]

    reply_markup = InlineKeyboardMarkup(buttons)
    photo_path = os.path.join(settings.MEDIA_ROOT, product.image.name)

    if not os.path.exists(photo_path):
        logger.error(f"Image not found: {photo_path}")
        return
    user_data['photo_path'] = photo_path

    send_photo_message(update, context, caption=caption, photo_path=photo_path, reply_markup=reply_markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
def handle_button_click_menu_order(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()

    if query.data == 'input_name':
        caption = "–í–≤–µ–¥–∏—Ç–µ –§–ò–û:"
        send_photo_message(update, context, caption=caption)
        context.user_data['query_data'] = 'input_name'
    elif query.data == 'input_phone':
        caption = "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω:"
        send_photo_message(update, context, caption=caption)
        context.user_data['query_data'] = 'input_phone'
    elif query.data == 'input_address':
        caption = "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å:"
        send_photo_message(update, context, caption=caption)
        context.user_data['query_data'] = 'input_address'
    elif query.data == 'delivery_time':
        caption = "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YY HH:MM"
        send_photo_message(update, context, caption=caption)
        context.user_data['query_data'] = 'delivery_time'
    elif query.data == 'input_comment':
        caption = "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É:"
        send_photo_message(update, context, caption=caption)
        context.user_data['query_data'] = 'input_comment'
    elif query.data == 'cancel_order':
        query.message.delete()
        query.message.reply_text("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞.")
        return ConversationHandler.END
    elif query.data == 'submit_order':
        user_data = context.user_data
        if all([user_data.get('name'), user_data.get('phone'), user_data.get('address'), user_data.get('delivery_date_time')]):
            print('–î–æ—à–ª–æ –¥–æ –∑–∞–∫–∞–∑–∞')
            submit_order(update, context)
            caption = "–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É!\n–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
            photo_path = os.path.join('static', 'products', 'to', 'call_manager.jpg')
            send_photo_message(update, context, photo_path=photo_path, caption=caption)

            return ConversationHandler.END
        else:
            show_order_form(update, context,
                            error_message="‚ÄºÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∑–∞–∫–∞–∑–∞ ‚ÄºÔ∏è")
            return INPUT_DATA

    return INPUT_DATA


# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
def input_data(update: Update, context: CallbackContext):
    text = update.message.text
    query_data = context.user_data.get('query_data')
    chat_id = update.effective_chat.id

    if 'query_msg_id' in context.user_data:
        context.bot.delete_message(chat_id=chat_id, message_id=context.user_data['query_msg_id'])
        del context.user_data['query_msg_id']

    if query_data == 'input_name':
        context.user_data['name'] = text
    elif query_data == 'input_phone':
        context.user_data['phone'] = text
    elif query_data == 'input_address':
        context.user_data['address'] = text
    elif query_data == 'delivery_time':
# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
        date_format = '%d.%m.%Y %H:%M'
        try:
# –ü—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ –¥–∞—Ç—É
            delivery_time = datetime.strptime(text, date_format)
            context.user_data['delivery_date_time'] = text
            context.user_data['delivery_time'] = delivery_time
            logger.info('–î–∞—Ç–∞ –≤–µ—Ä–Ω–∞—è: %s', delivery_time)
            print(f'–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {context.user_data["delivery_time"]}')
        except ValueError:
          # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É
            error_message = "‚ÄºÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ dd.mm.yyyy HH:MM ‚ÄºÔ∏è"
            show_order_form(update, context, error_message=error_message)
            return INPUT_DATA


    elif query_data == 'input_comment':
        context.user_data['comment'] = text

    context.user_data['query_data'] = None

    context.bot.delete_message(chat_id=chat_id, message_id=update.message.message_id)
    show_order_form(update, context)
    return INPUT_DATA


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    updater = Updater(TOKEN, use_context=True)

    dp = updater.dispatcher

    # –û–ø—Ä–µ–¥–µ–ª–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            EVENT: [CallbackQueryHandler(handle_callback)],
            BUDGET: [CallbackQueryHandler(handle_callback)],
            PRODUCT_SELECTION: [CallbackQueryHandler(handle_button_click)],
            INPUT_DATA: [CallbackQueryHandler(handle_button_click_menu_order),
                         MessageHandler(Filters.text & ~Filters.command, input_data)],
            CONFIRMATION: [CallbackQueryHandler(submit_order, pattern='^submit_order$')]
        },
        fallbacks=[CommandHandler('cancel', cancel),
                   CommandHandler('manager', manager_orders),
                   CommandHandler('delivery', delivery_orders)]
    )

    for handler in get_handlers():
        dp.add_handler(handler)

    dp.add_handler(conv_handler)


    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    updater.start_polling()
    updater.idle()


    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
    def error_handler(update: object, context: CallbackContext) -> None:
        logger.error("Exception while handling an update:", exc_info=context.error)
        if isinstance(context.error, telegram.error.BadRequest) and context.error.message == "Message is not modified":
            # Ignore this specific error or handle it differently
            return
        else:
            logger.warning('Update "%s" caused error "%s"' % (update, context.error))

    dp.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    main()
