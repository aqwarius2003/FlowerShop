import logging
import os

import django
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    CallbackContext,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Django
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "FlowerShop.settings")
django.setup()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Django
# –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª–∏ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Django
from tg_bot.models import Order, UserBot


def delivery_orders(update: Update, context: CallbackContext):
    if update.message:
        user_id = update.message.from_user.id
    elif update.callback_query:
        user_id = update.callback_query.from_user.id
    else:
        return  # TODO: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å–ª–∏ id –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ

    logger.info("–û—Ç–∫—Ä—ã—Ç–æ –º–µ–Ω—é –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞")

    delivery_person = UserBot.objects.filter(user_id=user_id, status="delivery").first()
    if not delivery_person:
        if update.message:
            update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–æ–≤.")
        elif update.callback_query:
            update.callback_query.message.reply_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–æ–≤."
            )
        return

    orders = Order.objects.filter(
        delivery_person=delivery_person, status__in=["inDelivery"]
    )

    if not orders.exists():
        if update.message:
            update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏.")
        elif update.callback_query:
            update.callback_query.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏.")
        return

    keyboard = []
    for order in orders:
        keyboard.append(
            [
                InlineKeyboardButton(
                    f"–ó–∞–∫–∞–∑ {order.id} - {order.product}",
                    callback_data=f"order_delivery_{order.id}",
                )
            ]
        )

    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.message:
        update.message.reply_text("–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤:", reply_markup=reply_markup)
    elif update.callback_query:
        update.callback_query.message.reply_text(
            "–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤:", reply_markup=reply_markup
        )


def handle_delivery_order(update: Update, context: CallbackContext):
    logger.info("–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–∞")
    query = update.callback_query
    query.answer()

    order_id = query.data.split("_")[2]
    order = Order.objects.get(id=int(order_id))

    delivery_status_choices = [("inDelivery", "–í –ø—É—Ç–∏"), ("delivered", "–î–æ—Å—Ç–∞–≤–ª–µ–Ω")]

    keyboard = [
        [
            InlineKeyboardButton(
                status[1], callback_data=f"setDeliveryStatus_{order.id}_{status[0]}"
            )
        ]
        for status in delivery_status_choices
    ]

    keyboard.append(
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_delivery_orders")]
    )

    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(
        f"üë§ –ò–º—è: {order.user}\n"
        f"üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∂–µ–ª–∞–µ–º–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏: {order.desired_delivery_date}\n"
        f"üíê –ë—É–∫–µ—Ç: {order.product.name}\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {order.product.price} —Ä—É–±.\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order.user.phone}\n"
        f"üè† –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {order.delivery_address}\n"
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É:{order.delivery_comments}\n"
        f"‚û° –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {order.get_status_display()} \n"
        f"‚úÖ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –∑–∞–∫–∞–∑–∞ {order.id}:",
        reply_markup=reply_markup,
    )


def go_back_to_delivery_orders(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()

    delivery_orders(update, context)


def go_back_to_manager_orders(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()

    manager_orders(update, context)


def set_delivery_status(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()

    _, order_id, new_status = query.data.split("_")
    order = Order.objects.get(id=int(order_id))

    order.status = new_status
    order.save()

    query.edit_message_text(
        f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {order.id} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {dict(Order.STATUS_CHOICES).get(new_status)}"
    )


def manager_orders(update: Update, context: CallbackContext):
    if update.message:
        user_id = update.message.from_user.id
    elif update.callback_query:
        user_id = update.callback_query.from_user.id
    else:
        return

    logger.info("–û—Ç–∫—Ä—ã—Ç–æ –º–µ–Ω—é –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
    manager_person = UserBot.objects.filter(user_id=user_id, status="manager").first()
    if not manager_person:
        if update.message:
            update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–æ–≤.")
        elif update.callback_query:
            update.callback_query.message.reply_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–æ–≤."
            )
        return

    orders = Order.objects.filter(status__in=["created", "inWork", "inDelivery"])

    if not orders.exists():
        if update.message:
            update.message.reply_text("–ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        elif update.callback_query:
            update.callback_query.message.reply_text("–ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    keyboard = []
    for order in orders:
        keyboard.append(
            [
                InlineKeyboardButton(
                    f"–ó–∞–∫–∞–∑ {order.id} - {order.product}",
                    callback_data=f"order_admin_{order.id}",
                )
            ]
        )

    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.message:
        update.message.reply_text("–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤:", reply_markup=reply_markup)
    elif update.callback_query:
        update.callback_query.message.reply_text(
            "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤:", reply_markup=reply_markup
        )


def handle_order_selection(update: Update, context: CallbackContext):
    query = update.callback_query
    logger.info(f"Callback data received: {query.data}")
    query.answer()

    order_id = query.data.split("_")[2]
    order = Order.objects.get(id=int(order_id))

    order_details = (
        f"üë§ –ò–º—è: {order.user}\n"
        f"üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∂–µ–ª–∞–µ–º–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏: {order.desired_delivery_date}\n"
        f"üïí –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: {order.creation_date}\n"
        f"üíê –ë—É–∫–µ—Ç: {order.product.name}\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {order.product.price} —Ä—É–±.\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order.user.phone}\n"
        f"üè† –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {order.delivery_address}\n"
        f"–°—Ç–∞—Ç—É—Å: {order.get_status_display()}\n"
        f"üì¶ –í—ã–±—Ä–∞–Ω–Ω—ã–π –¥–æ—Å—Ç–∞–≤—â–∏–∫: {order.delivery_person}\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞: {order.delivery_comments or '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –Ω–µ—Ç'}\n"
    )

    keyboard = [
        [
            InlineKeyboardButton(
                "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞", callback_data=f"change_status_{order.id}"
            ),
            InlineKeyboardButton(
                "–ù–∞–∑–Ω–∞—á–∏—Ç—å –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞", callback_data=f"assign_delivery_{order.id}"
            ),
            InlineKeyboardButton(
                "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ—Å—Ç–∞–≤—â–∏–∫—É", callback_data=f"comment_delivery_{order.id}"
            ),
        ],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_manager_orders")],
    ]
    replay_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text(order_details, reply_markup=replay_markup)


def change_order_status(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()

    order_id = query.data.split("_")[2]
    order = Order.objects.get(id=int(order_id))

    status_choices = Order.STATUS_CHOICES
    keyboard = [
        [
            InlineKeyboardButton(
                status[1], callback_data=f"setStatus_{order.id}_{status[0]}"
            ),
        ]
        for status in status_choices
    ]
    keyboard.append(
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_manager_orders")]
    )
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –∑–∞–∫–∞–∑–∞ {order.id}:", reply_markup=reply_markup
    )


def set_order_status(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    _, order_id, new_status = query.data.split("_")
    order = Order.objects.get(id=int(order_id))

    order.status = new_status
    order.save()

    query.edit_message_text(
        f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {order.id} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {dict(Order.STATUS_CHOICES).get(new_status)}"
    )


def assign_delivery(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()

    order_id = query.data.split("_")[2]
    order = Order.objects.get(id=int(order_id))

    delivery_people = UserBot.objects.filter(status="delivery")

    keyboard = [
        [
            InlineKeyboardButton(
                person.full_name,
                callback_data=f"setDelivery_{order.id}_{person.user_id}",
            )
        ]
        for person in delivery_people
    ]
    keyboard.append(
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_manager_orders")]
    )
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–≥–æ –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order.id}:", reply_markup=reply_markup
    )


def add_comment(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()

    order_id = query.data.split("_")[2]
    context.user_data["order_id_for_comment"] = order_id

    query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞:")


def handle_comment_input(update: Update, context: CallbackContext):
    order_id = context.user_data.get("order_id_for_comment")  # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–∫–∞–∑–∞
    if not order_id:
        update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–∞–∫–∞–∑ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.")
        return

    comment = update.message.text
    order = Order.objects.get(id=int(order_id))

    order.delivery_comments = comment
    order.save()

    update.message.reply_text(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É {order.id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")


def set_delivery_person(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()

    _, order_id, delivery_person_id = query.data.split("_")
    order = Order.objects.get(id=int(order_id))
    delivery_person = UserBot.objects.get(user_id=delivery_person_id)

    order.delivery_person = delivery_person
    order.save()

    query.edit_message_text(
        f"–î–æ—Å—Ç–∞–≤—â–∏–∫ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order.id} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {delivery_person.full_name}"
    )


logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)
