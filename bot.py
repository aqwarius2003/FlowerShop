import json
import logging
import os
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto,  Update
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext
import django
from django.conf import settings
from environs import Env

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'FlowerShop.settings')
django.setup()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Django

# –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª–∏ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Django
from tg_bot.models import Category, Product


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON
def load_json_data():
    logger.info(f"—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è menu.json")
    with open('menu.json', 'r', encoding='utf-8') as file:
        return json.load(file)

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def create_dynamic_buttons():
    categories = Category.objects.all()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    dynamic_buttons = [{"text": category.name, "callback": f"category_{category.id}"} for category in categories]
    return dynamic_buttons


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫
def create_event_menu():
    json_data = load_json_data()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON

    # –ï—Å–ª–∏ –≤ JSON —É–∫–∞–∑–∞–Ω–æ –ø–æ–ª–µ "def", –≤—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–¥–≥—Ä—É–∑–∫–∏ –∫–Ω–æ–ø–æ–∫
    dynamic_buttons = []
    if "def" in json_data["event_menu"]:
        if json_data["event_menu"]["def"] == "create_event_menu":
            dynamic_buttons = create_dynamic_buttons()

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ JSON –∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏
    buttons = dynamic_buttons + json_data["event_menu"]["buttons"]

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è Telegram
    keyboard_buttons = [[InlineKeyboardButton(button['text'], callback_data=button['callback'])] for button in buttons]
    keyboard = InlineKeyboardMarkup(keyboard_buttons)
    return json_data["event_menu"]["reply_text"], keyboard


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
def start(update: Update, context: CallbackContext):
    reply_text, keyboard = create_event_menu()  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    context.bot.send_message(chat_id=update.effective_chat.id, text=reply_text, reply_markup=keyboard)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
def handle_button_click(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()

    if query.data.startswith('category_'):
        category_id = query.data.split('_')[1]
        category = Category.objects.get(id=int(category_id))
        products = Product.objects.filter(categories=category)

        if not products.exists():
            query.edit_message_text("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")
            return

        context.user_data['products'] = list(products)
        context.user_data['current_product'] = 0
        show_product(update, context)

    elif query.data == 'next_product':
        next_product(update, context)

    elif query.data == 'prev_product':
        prev_product(update, context)

    elif query.data == 'menu_products':
        reply_text, keyboard = create_event_menu()
        query.edit_message_text(text=reply_text, reply_markup=keyboard)



def show_product(update: Update, context: CallbackContext):
    products = context.user_data['products']
    print(products)
    current_index = context.user_data['current_product']
    print(current_index)
    product = products[current_index]
    print(product)
    photo_path = os.path.join(settings.MEDIA_ROOT, product.image.name)

    if not os.path.exists(photo_path):
        logger.error(f"Image not found: {photo_path}")
        update.callback_query.edit_message_text(text="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    keyboard = [
        [InlineKeyboardButton("‚úî –ó–∞–∫–∞–∑–∞—Ç—å ",
                              callback_data=f'product_{product.id}')],
        [InlineKeyboardButton("‚óÄ –ü—Ä–µ–¥—ã–¥—É—â–∏–π",
                              callback_data='prev_product'),
         InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–π ‚ñ∂",
                              callback_data='next_product')],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
                              callback_data='menu_products')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query.message.photo:
        with open(photo_path, 'rb') as photo:
            media = InputMediaPhoto(photo, caption=f"üç∞ ***{product.name}***\n\n{product.description}\n\n"
                                                   f"–¶–µ–Ω–∞: ***{product.price} —Ä—É–±.***",
                                    parse_mode="Markdown")
            update.callback_query.message.edit_media(media=media, reply_markup=reply_markup)


def next_product(update: Update, context: CallbackContext):
    products = context.user_data['products']
    context.user_data['current_product'] = (context.user_data['current_product'] + 1) % len(products)
    show_product(update, context)

def prev_product(update: Update, context: CallbackContext):
    products = context.user_data['products']
    context.user_data['current_product'] = (context.user_data['current_product'] - 1) % len(products)
    show_product(update, context)


# –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
if __name__ == '__main__':
    env = Env()
    env.read_env()

    # tg_chat_id = os.environ['TG_CHAT_ID']
    tg_bot_token = os.environ['TG_BOT_TOKEN']
    # bot = telegram.Bot(token=tg_bot_token)

    updater = Updater(token=tg_bot_token)

    # –•–µ–Ω–¥–ª–µ—Ä—ã
    dispatcher = updater.dispatcher
    dispatcher.add_handler(CommandHandler('start', start))
    dispatcher.add_handler(CallbackQueryHandler(handle_button_click))
    dispatcher.add_handler(CallbackQueryHandler(next_product, pattern='^next_product$'))
    dispatcher.add_handler(CallbackQueryHandler(prev_product, pattern='^prev_product$'))

    updater.start_polling()
    updater.idle()
