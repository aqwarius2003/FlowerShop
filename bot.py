import json
import logging
import os

import django
from django.conf import settings
from environs import Env
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto, Update
from telegram.ext import CallbackContext, CallbackQueryHandler, CommandHandler, Updater

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Django
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "FlowerShop.settings")
django.setup()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Django

# –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª–∏ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Django
from tg_bot.models import Category, Order, Product, UserBot


def delivery_orders(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    logger.info("–û—Ç–∫—Ä—ã—Ç–æ –º–µ–Ω—é –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞")

    delivery_person = UserBot.objects.filter(user_id=user_id, status="delivery").first()
    if not delivery_person:
        update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–æ–≤.")
        return

    orders = Order.objects.filter(
        delivery_person=delivery_person, status__in=["inDelivery"]
    )

    if not orders.exists():
        update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏.")
        return

    keyboard = []
    for order in orders:
        keyboard.append(
            [
                InlineKeyboardButton(
                    f"–ó–∞–∫–∞–∑ {order.id} - {order.product}",
                    callback_data=f"order_delivery_{order.id}",
                )
            ]
        )

    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text("–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤:", reply_markup=reply_markup)


def handle_delivery_order(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()

    # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–∫–∞–∑–∞
    order_id = query.data.split("_")[2]
    order = Order.objects.get(id=int(order_id))

    # –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤—â–∏–∫–æ–º
    delivery_status_choices = [("inDelivery", "–í –ø—É—Ç–∏"), ("delivered", "–î–æ—Å—Ç–∞–≤–ª–µ–Ω")]

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
    keyboard = [
        [
            InlineKeyboardButton(
                status[1], callback_data=f"setDeliveryStatus_{order.id}_{status[0]}"
            )
        ]
        for status in delivery_status_choices
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(
        f"üë§ –ò–º—è: {order.user}\n"
        f"üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∂–µ–ª–∞–µ–º–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏: {order.desired_delivery_date}\n"
        f"üíê –ë—É–∫–µ—Ç: {order.product.name}\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {order.product.price} —Ä—É–±.\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order.user.phone}\n"
        f"üè† –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {order.delivery_address}\n"
        f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å {order.get_status_display()} \n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –∑–∞–∫–∞–∑–∞ {order.id}:",
        reply_markup=reply_markup,
    )


def set_delivery_status(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()

    # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–∫–∞–∑–∞ –∏ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
    _, order_id, new_status = query.data.split("_")
    order = Order.objects.get(id=int(order_id))

    # –ò–∑–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    order.status = new_status
    order.save()

    query.edit_message_text(
        f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {order.id} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {dict(Order.STATUS_CHOICES).get(new_status)}"
    )


def manager_orders(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    logger.info("–û—Ç–∫—Ä—ã—Ç–æ –º–µ–Ω—é –º–µ–Ω–µ–¥–∂–µ—Ä–∞")

    if user_id in UserBot.objects.filter(status="manager"):
        update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–æ–≤.")
        return

    orders = Order.objects.filter(status__in=["created", "inWork", "inDelivery"])

    if not orders.exists():
        update.message.reply_text("–ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    keyboard = []
    for order in orders:
        keyboard.append(
            [
                InlineKeyboardButton(
                    f"–ó–∞–∫–∞–∑ {order.id} - {order.product}",
                    callback_data=f"order_admin_{order.id}",
                )
            ]
        )

    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text("–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤:", reply_markup=reply_markup)


def handle_order_selection(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()

    order_id = query.data.split("_")[2]
    order = Order.objects.get(id=int(order_id))

    order_details = (
        f"üë§ –ò–º—è: {order.user}\n"
        f"üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∂–µ–ª–∞–µ–º–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏: {order.desired_delivery_date}\n"
        f"üïí –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: {order.creation_date}\n"
        f"üíê –ë—É–∫–µ—Ç: {order.product.name}\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {order.product.price} —Ä—É–±.\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order.user.phone}\n"
        f"üè† –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {order.delivery_address}\n"
        f"–°—Ç–∞—Ç—É—Å: {order.get_status_display()}\n"
        f"üì¶ –í—ã–±—Ä–∞–Ω–Ω—ã–π –¥–æ—Å—Ç–∞–≤—â–∏–∫: {order.delivery_person}\n"
    )

    keyboard = [
        [
            InlineKeyboardButton(
                "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞", callback_data=f"change_status_{order.id}"
            ),
            InlineKeyboardButton(
                "–ù–∞–∑–Ω–∞—á–∏—Ç—å –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞", callback_data=f"assign_delivery_{order.id}"
            ),
        ]
    ]
    replay_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text(order_details, reply_markup=replay_markup)


def change_order_status(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()

    order_id = query.data.split("_")[2]
    order = Order.objects.get(id=int(order_id))

    status_choices = Order.STATUS_CHOICES
    keyboard = [
        [
            InlineKeyboardButton(
                status[1], callback_data=f"setStatus_{order.id}_{status[0]}"
            )
        ]
        for status in status_choices
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –∑–∞–∫–∞–∑–∞ {order.id}:", reply_markup=reply_markup
    )


def set_order_status(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    _, order_id, new_status = query.data.split("_")
    order = Order.objects.get(id=int(order_id))

    order.status = new_status
    order.save()

    query.edit_message_text(
        f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {order.id} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {dict(Order.STATUS_CHOICES).get(new_status)}"
    )


def assign_delivery(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()

    order_id = query.data.split("_")[2]
    order = Order.objects.get(id=int(order_id))

    delivery_people = UserBot.objects.filter(status="delivery")

    keyboard = [
        [
            InlineKeyboardButton(
                person.full_name,
                callback_data=f"setDelivery_{order.id}_{person.user_id}",
            )
        ]
        for person in delivery_people
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–≥–æ –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order.id}:", reply_markup=reply_markup
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–≥–æ –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞
def set_delivery_person(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()

    _, order_id, delivery_person_id = query.data.split("_")
    order = Order.objects.get(id=int(order_id))
    delivery_person = UserBot.objects.get(user_id=delivery_person_id)

    order.delivery_person = delivery_person
    order.save()

    query.edit_message_text(
        f"–î–æ—Å—Ç–∞–≤—â–∏–∫ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order.id} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {delivery_person.full_name}"
    )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON
def load_json_data():
    logger.info(f"c—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è menu.json")
    with open("menu.json", "r", encoding="utf-8") as file:
        return json.load(file)


logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def create_dynamic_buttons():
    categories = Category.objects.all()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    dynamic_buttons = [
        {"text": category.name, "callback": f"category_{category.id}"}
        for category in categories
    ]
    return dynamic_buttons


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫
def create_event_menu():
    json_data = load_json_data()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON

    # –ï—Å–ª–∏ –≤ JSON —É–∫–∞–∑–∞–Ω–æ –ø–æ–ª–µ "def", –≤—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–¥–≥—Ä—É–∑–∫–∏ –∫–Ω–æ–ø–æ–∫
    dynamic_buttons = []
    if "def" in json_data["event_menu"]:
        if json_data["event_menu"]["def"] == "create_event_menu":
            dynamic_buttons = create_dynamic_buttons()

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ JSON –∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏
    buttons = dynamic_buttons + json_data["event_menu"]["buttons"]

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è Telegram
    keyboard_buttons = [
        [InlineKeyboardButton(button["text"], callback_data=button["callback"])]
        for button in buttons
    ]
    keyboard = InlineKeyboardMarkup(keyboard_buttons)
    return json_data["event_menu"]["reply_text"], keyboard


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
def start(update: Update, context: CallbackContext):
    reply_text, keyboard = create_event_menu()  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    context.bot.send_message(
        chat_id=update.effective_chat.id, text=reply_text, reply_markup=keyboard
    )


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
def handle_button_click(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()

    if query.data.startswith("category_"):
        category_id = query.data.split("_")[1]
        category = Category.objects.get(id=int(category_id))
        products = Product.objects.filter(categories=category)

        if not products.exists():
            query.edit_message_text("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")
            return

        context.user_data["products"] = list(products)
        context.user_data["current_product"] = 0
        show_product(update, context)

    elif query.data == "next_product":
        next_product(update, context)

    elif query.data == "prev_product":
        prev_product(update, context)

    elif query.data == "menu_products":
        reply_text, keyboard = create_event_menu()
        query.edit_message_text(text=reply_text, reply_markup=keyboard)


def show_product(update: Update, context: CallbackContext):
    products = context.user_data["products"]
    current_index = context.user_data["current_product"]

    if products and 0 <= current_index < len(products):
        product = products[current_index]

        photo_path = os.path.join(settings.MEDIA_ROOT, product.image.name)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
        with open(photo_path, "rb") as photo:
            update.callback_query.message.reply_photo(
                photo=photo,
                caption=(
                    f"*–û–ø–∏—Å–∞–Ω–∏–µ:* {product.description}\n"
                    f"*–°—Ç–æ–∏–º–æ—Å—Ç—å:* {product.price} —Ä—É–±.\n\n"
                    f"*–•–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –µ—â–µ –±–æ–ª–µ–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ? –ü–æ–¥–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –±—É–∫–µ—Ç –∏–∑ –Ω–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏–ª–∏ –∑–∞–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Ñ–ª–æ—Ä–∏—Å—Ç–∞*"
                ),
                parse_mode="Markdown",
            )
    print(products)
    current_index = context.user_data["current_product"]
    print(current_index)
    product = products[current_index]
    print(product)
    photo_path = os.path.join(settings.MEDIA_ROOT, product.image.name)

    if not os.path.exists(photo_path):
        logger.error(f"Image not found: {photo_path}")
        update.callback_query.edit_message_text(text="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    keyboard = [
        [InlineKeyboardButton("‚úî –ó–∞–∫–∞–∑–∞—Ç—å ", callback_data=f"product_{product.id}")],
        [
            InlineKeyboardButton("‚óÄ –ü—Ä–µ–¥—ã–¥—É—â–∏–π", callback_data="prev_product"),
            InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–π ‚ñ∂", callback_data="next_product"),
        ],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu_products")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query.message.photo:
        with open(photo_path, "rb") as photo:
            media = InputMediaPhoto(
                photo,
                caption=f"üç∞ ***{product.name}***\n\n{product.description}\n\n"
                f"–¶–µ–Ω–∞: ***{product.price} —Ä—É–±.***",
                parse_mode="Markdown",
            )
            update.callback_query.message.edit_media(
                media=media, reply_markup=reply_markup
            )


def next_product(update: Update, context: CallbackContext):
    products = context.user_data["products"]
    context.user_data["current_product"] = (
        context.user_data["current_product"] + 1
    ) % len(products)
    show_product(update, context)


def prev_product(update: Update, context: CallbackContext):
    products = context.user_data["products"]
    context.user_data["current_product"] = (
        context.user_data["current_product"] - 1
    ) % len(products)
    show_product(update, context)


# –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
if __name__ == "__main__":
    env = Env()
    env.read_env()

    # tg_chat_id_meneger = int(os.environ["TG_CHAT_ID"])
    tg_bot_token = os.environ["TG_BOT_TOKEN"]
    # bot = telegram.Bot(token=tg_bot_token)

    updater = Updater(token=tg_bot_token)

    # –•–µ–Ω–¥–ª–µ—Ä—ã
    dispatcher = updater.dispatcher
    dispatcher.add_handler(CommandHandler("manager", manager_orders))
    dispatcher.add_handler(CommandHandler("delivery", delivery_orders))
    dispatcher.add_handler(
        CallbackQueryHandler(handle_order_selection, pattern="^order_admin_")
    )
    dispatcher.add_handler(
        CallbackQueryHandler(change_order_status, pattern="^change_status_")
    )
    dispatcher.add_handler(
        CallbackQueryHandler(set_order_status, pattern="^setStatus_")
    )
    dispatcher.add_handler(
        CallbackQueryHandler(assign_delivery, pattern="^assign_delivery_")
    )
    dispatcher.add_handler(
        CallbackQueryHandler(set_delivery_person, pattern="^setDelivery_")
    )
    dispatcher.add_handler(
        CallbackQueryHandler(handle_delivery_order, pattern="^order_delivery_")
    )
    dispatcher.add_handler(
        CallbackQueryHandler(set_delivery_status, pattern="^setDeliveryStatus_")
    )
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CallbackQueryHandler(handle_button_click))
    dispatcher.add_handler(CallbackQueryHandler(next_product, pattern="^next_product$"))
    dispatcher.add_handler(CallbackQueryHandler(prev_product, pattern="^prev_product$"))

    updater.start_polling()
    updater.idle()
